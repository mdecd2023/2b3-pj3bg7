<h1>About</h1>
<table style="width: 799px;">
<tbody>
<tr style="height: 14px;">
<td style="width: 104px; height: 14px;">學號         </td>
<td style="width: 83px; height: 14px;">姓名  </td>
<td style="width: 165.087px; height: 14px;">github             </td>
<td style="width: 406.913px; height: 14px;">ip</td>
</tr>
<tr style="height: 28px;">
<td style="width: 104px; height: 28px;">40732331</td>
<td style="width: 83px; height: 28px;">黃政憲</td>
<td style="width: 165.087px; height: 28px;">a40732331</td>
<td style="width: 406.913px; height: 28px;"><a href="http://[2001:288:6004:17:2023:cdb:7:1]:23020/">http://[2001:288:6004:17:2023:cdb:7:1]:23020</a></td>
</tr>
<tr style="height: 34.075px;">
<td style="width: 104px; height: 34.075px;">41023213</td>
<td style="width: 83px; height: 34.075px;">張義聖</td>
<td style="width: 165.087px; height: 34.075px;">41023213</td>
<td style="width: 406.913px; height: 34.075px;"><a href="http://[2001:288:6004:17:2023:cdb:7:2]:23020/">http://[2001:288:6004:17:2023:cdb:7:2]:23020</a></td>
</tr>
<tr style="height: 32px;">
<td style="width: 104px; height: 32px;">41023216</td>
<td style="width: 83px; height: 32px;">郭宥辰</td>
<td style="width: 165.087px; height: 32px;">41023216</td>
<td style="width: 406.913px; height: 32px;"><a href="http://[2001:288:6004:17:2023:cdb:7:3]:23020/">http://[2001:288:6004:17:2023:cdb:7:3]:23020</a></td>
</tr>
<tr style="height: 40px;">
<td style="width: 104px; height: 40px;"><span>41023218 </span></td>
<td style="width: 83px; height: 40px;"><span>陳岳檉<br/></span></td>
<td style="width: 165.087px; height: 40px;"><span>snowfall-killer</span></td>
<td style="width: 406.913px; height: 40px;"><span><a href="http://[2001:288:6004:17:2023:cdb:7:4]:23020/">http://[2001:288:6004:17:2023:cdb:7:4]:23020</a></span></td>
</tr>
<tr style="height: 34px;">
<td style="width: 104px; height: 34px;"><span>41023225</span></td>
<td style="width: 83px; height: 34px;"><span>陳威成<br/></span></td>
<td style="width: 165.087px; height: 34px;">xiaomantou0411</td>
<td style="width: 406.913px; height: 34px;"><span><a href="http://[2001:288:6004:17:2023:cdb:7:5]:23020">http://[2001:288:6004:17:2023:cdb:7:5]:23020</a></span></td>
</tr>
<tr style="height: 2px;">
<td style="width: 104px; height: 2px;">41023237</td>
<td style="width: 83px; height: 2px;">黃祈瑋 </td>
<td style="width: 165.087px; height: 2px;">www000123</td>
<td style="width: 406.913px; height: 2px;">
<p><a href="http://[2001:288:6004:17:2023:cdb:7:6]:23020">http://[2001:288:6004:17:2023:cdb:7:6]:23020</a></p>
</td>
</tr>
<tr style="height: 6px;">
<td style="width: 104px; height: 6px;">41023245</td>
<td style="width: 83px; height: 6px;">劉于綸</td>
<td style="width: 165.087px; height: 6px;">41023245</td>
<td style="width: 406.913px; height: 6px;">
<p><a href="http://[2001:288:6004:17:2023:cdb:7:7]:23020/">http://[2001:288:6004:17:2023:cdb:7:7]:23020</a></p>
</td>
</tr>
<tr style="height: 10px;">
<td style="width: 104px; height: 10px;">41023248</td>
<td style="width: 83px; height: 10px;">蔡弦霖 </td>
<td style="width: 165.087px; height: 10px;">smart-777 </td>
<td style="width: 406.913px; height: 10px;">
<p><a href="http://[2001:288:6004:17:2023:cdb:7:8]:23020">http://[2001:288:6004:17:2023:cdb:7:8]:23020</a></p>
</td>
</tr>
</tbody>
</table>
<p></p>
<p>倉儲: <a href="https://github.com/mdecd2023/2b3-pj3bg7">https://github.com/mdecd2023/2b3-pj3bg7</a></p>
<p>網站: <a href="https://mdecd2023.github.io/2b3-pj3bg7/content/index.html">https://mdecd2023.github.io/2b3-pj3bg7/content/index.html</a></p>
<p></p>
<h1>group</h1>
<p></p>
<p><button id="亂數 ">列出全班各學員 resume, football, pj1, pj2, pj3 等五個倉儲的靜態網站與倉儲連結</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/www000123/42b8af3cc6f18db5ca7247e97e227d63/raw/a164067da748073151b9177ee6e973527edb5aaf/www000123"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- 亂數 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/www000123/42b8af3cc6f18db5ca7247e97e227d63/raw/a164067da748073151b9177ee6e973527edb5aaf/www000123"
# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "亂數 " 的按鈕點按時, 執行 add 方法
doc["亂數 "].bind('click', add)
</script>
</p>
<p><!-- 亂數  結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div><h1>pj3</h1>
<p><strong>工作分配</strong></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>41023213 </span></span><span data-contrast="none" data-usefontface="true"><span>繪圖</span></span><span data-contrast="none" data-usefontface="true"><span> </span></span><span data-contrast="none" data-usefontface="true"><span> </span></span><span></span></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>41023216 </span></span><span data-contrast="none" data-usefontface="true"><span>ppt pdf<span> </span></span></span><span data-contrast="none" data-usefontface="true"><span>輔助繪圖</span></span><span></span></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>41023218</span></span><span data-contrast="none" data-usefontface="true"><span> 網站維護和輔助程式設計</span></span><span></span></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>41023225</span></span><span data-contrast="none" data-usefontface="true"><span> </span></span><span data-contrast="none" data-usefontface="true"><span>ppt</span></span><span data-contrast="none" data-usefontface="true"><span><span> </span></span></span><span data-contrast="none" data-usefontface="true"><span>pdf</span></span><span data-contrast="none" data-usefontface="true"><span><span> </span>輔助繪圖</span></span><span></span></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>41023237</span></span><span data-contrast="none" data-usefontface="true"><span>  記</span></span><span data-contrast="none" data-usefontface="true"><span>分板程式和車子程式</span></span><span></span></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>41023245 機器人與場地</span></span><span data-contrast="none" data-usefontface="true"><span>設計及維護</span></span><span></span></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>41023248</span></span><span data-contrast="none" data-usefontface="true"><span> 機器人與場地</span></span><span data-contrast="none" data-usefontface="true"><span>設計</span></span><span data-contrast="none" data-usefontface="true"><span>及維護</span></span><span></span></p>
<p data-ccp-props='{"335551550":1,"335551620":1,"335559683":0,"335559685":0,"335559731":0,"335559737":0,"335562764":2,"335562765":0.9,"335562766":4,"335562767":10,"335562768":4,"335562769":0}'><span data-contrast="none" data-usefontface="true"><span>40732337 </span></span><span data-contrast="none" data-usefontface="true"><span>繪圖</span></span></p>
<p>-------------------------------------------------------------------------------------------------------</p>
<p><strong>1.場地設計</strong></p>
<p><span>場地尺寸 : 長 4m x 寬 2.5m</span></p>
<p><span>球門尺寸 : 長 0.6m, 高 0.3m, 寬 0.1m</span></p>
<p><span>足球規格 : 白色, 直徑 0.1m, 重量 0.5kg</span></p>
<p><span><img alt="" height="113" src="/images/場地.png" width="253"/></span></p>
<p></p>
<p><strong>2.玩家設計與理念</strong></p>
<p><img alt="" height="169" src="https://cdn.discordapp.com/attachments/1113781275656998921/1114652240800653342/image.png" width="310"/></p>
<p>外觀的設計比較簡單使用原本泡泡機器人的本體，我們更多的是在功能性的改良，上方的槌子可以自由操控左右擺動來阻擋其他玩家降低帶球時球被搶的風險，而檔板我們是參彈珠台的設計，左右各有一個可操控的開關使玩家可以做出把球射出的動作，槌子是懸空作用為檔人並不會碰到球，所以不會有妨礙到射球情況發生。</p>
<p><strong>3.輪盤記分板繪製 </strong><br/><strong></strong></p>
<p><strong></strong></p>
<p><strong><img alt="" height="188" src="https://cdn.discordapp.com/attachments/892611215581380678/1111768728594563112/image.png" width="254"/></strong></p>
<p><strong><img alt="" height="214" src="https://cdn.discordapp.com/attachments/892611215581380678/1111769389109358763/image.png" width="254"/></strong></p>
<p><strong><img alt="" height="272" src="/images/111111.png" width="252"/></strong></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/uG6Bo-oqXy8" width="560"></iframe></strong></p>
<p><strong>4.輪盤記分板重點程式 </strong></p>
<p>function sysCall_actuation()<br/> --simUI.setLabelText(ui, 30, tostring(sim.getFloatSignal("myVariable")))<br/> result=sim.readProximitySensor(sensor)<br/> if(score1&lt;99)then<br/> if(result&gt;0)then<br/> score2 = score1+1<br/> p= p +72<br/> sim.setJointTargetPosition(right, math.rad(p))<br/> simUI.setLabelText(ui, 30, tostring(score2))</p>
<p>sim.setObjectPosition(bubbleRob, -1, initialPosition)<br/> sim.setObjectOrientation(bubbleRob, -1, initialOrientation)<br/> sim.setObjectPosition(bubbleRob2, -1, initialPosition2)<br/> sim.setObjectOrientation(bubbleRob2, -1, initialOrientation2)<br/> sim.setObjectPosition(ball, -1, initialballPosition)<br/> sim.setObjectOrientation(ball, -1, initialballOrientation)<br/> score1=score2<br/> if(p == 720)then<br/> p=0<br/> p2= p2 +72<br/> sim.setJointTargetPosition(left, math.rad(p2))<br/> end<br/> end<br/> else<br/> sim.pauseSimulation()<br/> end<br/>end</p>
<p><strong>5.玩家控制程式與設置</strong></p>
<p><span style="color: #ff0000;">移動程式</span></p>
<p># pip install pyzmq cbor keyboard<br/>from zmqRemoteApi_IPv6 import RemoteAPIClient<br/>import keyboard</p>
<p>client = RemoteAPIClient('2001:288:6004:17:2023:cdb:7:6', 23000)</p>
<p>print('Program started')<br/>sim = client.getObject('sim')</p>
<p># Define the size and position of the cuboid<br/>size = [0.1, 0.2, 0.3]<br/>position = [0, 0, 0.15]</p>
<p><br/>sim.startSimulation()</p>
<p>print('Simulation started')</p>
<p><br/>def setBubbleRobVelocity(leftWheelVelocity, rightWheelVelocity):<br/> leftMotor = sim.getObject('/leftMotor7')<br/> rightMotor = sim.getObject('/rightMotor7')<br/> sim.setJointTargetVelocity(leftMotor, leftWheelVelocity)<br/> sim.setJointTargetVelocity(rightMotor, rightWheelVelocity)</p>
<p><br/>while True:<br/> if keyboard.is_pressed('up'):<br/> setBubbleRobVelocity(2.5, 2.5)<br/> elif keyboard.is_pressed('down'):<br/> setBubbleRobVelocity(-2.0, -2.0)<br/> elif keyboard.is_pressed('left'):<br/> setBubbleRobVelocity(-1.0, 1.0)<br/> elif keyboard.is_pressed('right'):<br/> setBubbleRobVelocity(1.0, -1.0)<br/> else:<br/> setBubbleRobVelocity(0.0, 0.0)</p>
<p></p>
<p><span style="color: #ff0000;">控制程式</span></p>
<p># pip install pyzmq cbor keyboard<br/>from zmqRemoteApi_IPv6 import RemoteAPIClient<br/>import keyboard</p>
<p>client = RemoteAPIClient('2001:288:6004:17:2023:cdb:7:6', 23000)</p>
<p>print('Program started')<br/>sim = client.getObject('sim')</p>
<p># Define the size and position of the cuboid<br/>size = [0.1, 0.2, 0.3]<br/>position = [0, 0, 0.15]</p>
<p><br/>sim.startSimulation()</p>
<p>print('Simulation started')<br/>left = sim.getObject('/left7')<br/>right = sim.getObject('/right7')<br/>space = sim.getObject('/space7')</p>
<p><br/> <br/>while True:<br/> if keyboard.is_pressed('a'):<br/> sim.setJointTargetPosition(left, 1.5)<br/> else:<br/> sim.setJointTargetPosition(left, 0)<br/> if keyboard.is_pressed('d'):<br/> sim.setJointTargetPosition(right, -1.5)<br/> else:<br/> sim.setJointTargetPosition(right, 0)<br/> if keyboard.is_pressed('e'):<br/> sim.setJointTargetPosition(space, -1.5)<br/> elif keyboard.is_pressed('q'):<br/> sim.setJointTargetPosition(space, 1.5)<br/> else:<br/> sim.setJointTargetPosition(space, 0)</p>
<p></p><h2>報告</h2>
<p><a href="https://nfuedu-my.sharepoint.com/:p:/g/personal/41023248_nfu_edu_tw/EXf4-3qp22BDnQfOi_0rnCwBnVWNN88Zczz5cfG1kHHl8w?e=dhutAG">ppt</a></p>
<p></p>
<p><a href="https://nfuedu-my.sharepoint.com/:w:/g/personal/41023248_nfu_edu_tw/EcJrP51fTExFq8ODpcWSxtEBcnjQsMA_gLnNIi2j_L5qcw?e=5Ydsjk">word</a></p><h2>心得</h2>
<ol>
<li>40732331：這門課程將其他課堂學得的繪圖技巧應用在這門課程上，也學習使用coppeliasim來製作機器人去作動，在課堂上和同學協調不斷調整整個足球場遊戲，也不斷請教岳檉還有其他同組成員git的相關指令。雖然自己目前仍不成熟，但還會繼續多加去實作來補足自己經驗不足的部分。</li>
<li>41023213：這次參與了模型製作，最難的部分是要符合設計，要調整草圖設計方式，還有組合零件，最後能參與到協同真的很有成就感</li>
<li>41023216：</li>
<li>41023218：這學期我比較著重在命令提示字元的指令上，與其他組員「協同」合 作是這學期的一大難題，如何近端git pull同步遠端而不使用重新git clone暴力 解，成為了我鑽研的課題。</li>
<li>41023225：</li>
<li>41023237：我在製作程式時，出現了許多困難，雖然程式想法非常簡單，但因為英文能力的不足還有對程式語言的不了解，所以在寫程式時，明明非常簡單，但在找資料和寫法上浪費了很多時間，不過也因此學到很多東西。</li>
<li>41023245：我們這學期使用coppeliasim製作了許多機器人來進行模擬，在其中遇到了許多問題，我們各種嘗試並把它解決了。</li>
<li>41023248：這學期學到了如何製作機器人並使用程式操控，通過不斷的測試與改良做出了具有一些奇特功能的機器人，也學習到了如何分工，使一件事變得更加輕鬆簡單。</li>
</ol><h1>會議記錄</h1>
<h2>共同分工會議</h2>
<p>共同分工會議</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/soMCjc8Fe40" width="560"></iframe></p>
<form>
<div style="max-width: 50em; margin-bottom: 10em;"><br/> <textarea id="code-html" name="code-html" style="width: 560px; height: 410px;">這邊做第一次開會，先檢討一下要製作這個足球機器人的遊戲，首先分配工作。

    張義聖擅長繪圖，先分配繪圖工作。
    陳威成共同繪圖作業，車子、然後可能還有機器人的繪圖，並和陳威成一同製作ppt和PDF。
    郭宥辰可以稍微幫忙畫一點，不過主要製作PDF，ppt的部分也可以幫忙，還有可以再幫忙一些比較簡單的繪圖部分，數字號碼，輔助他們兩個做好。
    陳岳檉可以負責網站的維護，以前pj1或pj2，基本上網站都是陳岳檉在維護，主要我們PJ3的網站維護，就是先給陳岳檉。而網站維護會的話，程式也會一點，也可以輔助黃祈瑋幫忙一些做程式的部分。
    黃祈瑋做總體程式，全部的計分板等等，程式全部都給黃祈瑋，並提供一些模型的點子給畫圖的組員去製作。
    劉于綸會製作模型的外型，比如想畫怎樣的，就提供點子給繪圖組，然後再幫忙畫一些。然後大家圖畫完，程式也寫完，之後要放入那個場景，黃祈瑋就需要先把場景的維護做好。 
    蔡弦霖先幫忙跟劉于綸做場景維護，蔡弦霖對那個車子的設計有有些概念和想法，也可以幫忙製作。
    黃政憲會繪圖，可以和張義聖去做最多的繪圖工作，就是比較難的部分，或是比較複雜的，就交給兩位先去畫。
    目前分配工作就先到這，下一次開會就是劉于綸和蔡弦霖設計出來的東西，然後畫圖的人去分配工作。黃祈瑋跟陳岳檉會討論出程式的寫法，到目前的工作就先分配到這邊。

</textarea></div>
</form><h2>繪圖會議</h2>
<p>繪圖會議</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0pCg5ol8NNs" width="560"></iframe></p>
<p></p>
<form>
<div style="max-width: 50em; margin-bottom: 10em;"><br/> <textarea id="code-html" name="code-html" style="width: 560px; height: 510px;">我們今天要說明討論的是球場跟球員的設計理念，我們的設計理念就是盡量簡單，球場的設計是按照老師給的規格下去製作在稍微做一點小細節改變，球門幫他新增一個感應器，在製作一個圍牆讓球跟球員不會跑出去，球員則是用原本泡泡機器人的本體，去加以改裝出新的能讓它不只是會前進跟後退，然後球員的部分，我們幫他們加了兩個檔板讓我們的機器人不只是會用身體去推球還可以用那兩個檔板把球射出去，還幫他加了槌子，讓他在給敵對的機器人追擊時有保護球的能力，並且做到在追擊敵對機器人時給予干擾。</textarea></div>
</form><h2>場地與玩家設計會議</h2>
<p>場地與玩家設計會議</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/kvejLsNj5e8" width="560"></iframe></p>
<p></p>
<form>
<div style="max-width: 50em; margin-bottom: 10em;"><br/> <textarea id="code-html" name="code-html" style="width: 560px; height: 510px;">我們今天要說明討論的是球場跟球員的設計理念，我們的設計理念就是盡量簡單，球場的設計是按照老師給的規格下去製作在稍微做一點小細節改變，球門幫他新增一個感應器，在製作一個圍牆讓球跟球員不會跑出去，球員則是用原本泡泡機器人的本體，去加以改裝出新的能讓它不只是會前進跟後退，然後球員的部分，我們幫他們加了兩個檔板讓我們的機器人不只是會用身體去推球還可以用那兩個檔板把球射出去，還幫他加了槌子，讓他在給敵對的機器人追擊時有保護球的能力，並且做到在追擊敵對機器人時給予干擾。。</textarea></div>
</form><h2>程式設計會議</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/H9bGVjW1s7k" width="560"></iframe></p>
<p><button class="button">程式設計會議文字稿</button></p>
<form>
<div style="max-width: 50em; margin-bottom: 10em;"><br/> <textarea id="code-html" name="code-html" style="width: 560px; height: 510px;">我這邊齒輪程式我給它導入一個數學的模組，數學模組的作用就是這一段，這一段是軸的位置，然後因為我要讓它轉固定角度，但是這個位置原本的設定是弧度，但是我弧度換角度那個π的計算非常難算，所以我給它導入一個數學模組把原本的弧度，框框裡面就是放角度。
然後這邊就是球進門之後偵測到這個偵測器，有偵測到東西的時候，所有角都會回到原本的預設位子這樣子，然後我這邊的原理非常簡單，就是我這裡設置一個p值跟一個p2的值，p值就是個位數的，p2值就是十位數的，然後這邊就很簡單就是720就是轉了兩圈，720就是小齒輪轉了兩圈、大齒輪轉一圈，當p2轉兩圈的時候就代表它的值超過99，它就會停止，這邊是p會等於p+72，就是每執行偵測到一次的時候，p的值就會增加72，也就是說，它可能原本是0，增加72就是1，再增加72就是2這樣子，基本上齒輪的程式沒什麼特別的，就是很簡單的一個概念。
那...來看一下我們機器人的程式，我們有兩個，一個是移動，那我們移動的部分基本上跟原本的pj2的程式幾乎一模一樣，然後這裡是ip，這裡就是你有連線到它就會說話，然後這裡是sim的文件的東西，這邊就是導入模組，這是ipv6的。
這邊的程式最基本的東西就是設定它的速度就是這個東西，這個東西設定成這個和這個東西，這個東西就是它的轉速，這是它設定它的轉速，然後右邊就是右邊的轉速，然後由這邊來控制轉速，就是原本要打兩行，一個左輪一個右輪，現在變成都只要打這一行這樣子，那...我們的移動程式就跟pj2的機器人幾乎一模一樣，就比較簡單，可能有改一點基本的速度。
然後控制的部分是，控制的部分就是這裡是因為這裡我們沒有推球裝置，然後我們的推球不是有兩片手板跟這個A跟D，就是可以控制左手推跟一個右手推這樣子，然後這裡就是用位子的概念去控制，那...程式基本上就是這樣，很簡單。有什麼問題嗎？哪個部分有聽不懂的？
OK都聽得懂。
那...有沒有想要改的？就是覺得機器人可以怎麼移動會改得更好？有沒有想法？沒有？我們機器人這邊是我們之後還要寫一個槌子的程式，那我們這邊槌子的程式也基本上跟這個擋板的程式基本上一模一樣，然後...我們基本上沒有什麼問題啦~就程式基本上就是做一些簡單的改動，然後就可以做出想要的功能，基本上就是這樣。</textarea></div>
</form>
<p><button class="button">程式問題1 : 程式控制主軸如何精確的控制轉的角度？</button></p>
<form>
<div style="max-width: 50em; margin-bottom: 10em;"><br/><textarea id="code-html" name="code-html" style="width: 560px; height: 40px;">程式回答1：主軸位置的數值是弧度，所以無法利用計算的方式控制在36度，所以我利用了math來轉換，只要在math.rad()中填入角度他就會幫我轉成弧度來控制。</textarea></div>
</form>
<p><button class="button">程式問題2：if....elif....else 和while true：的使用方式？</button></p>
<form>
<div style="max-width: 50em; margin-bottom: 10em;"><br/><textarea id="code-html" name="code-html" style="width: 560px; height: 215px;">程式回答2 : 如果程式中
while true :
if a = 1 :
print(1)
elif a = 1:
print(2)
else:
print(3)
這種時候，如果a為1那就會說1，但如果a是2就會說2，但如果if 和elif的條件衝到，將會先執行if的，而else則就是在上述的條件都不成立時，則就會執行else下的指令，只要將這些條件放在while true 下，程式就會不段執行，不會因為執行一次後就停止，是迴圈的一種。</textarea></div>
</form><h1>Downloads</h1>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41023237_nfu_edu_tw/Ebq2S1ArB_lJsyUPLVTH3AoBmPdryUVPy8olY3ppSBWFRQ?e=Ai6Guy">Game</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41023245_nfu_edu_tw/Eduw5xN_LaFDgTBv-MsdBn0BOLay32s2I__vtNTtGCOu_w?e=09AqF7">地圖</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41023237_nfu_edu_tw/EbeNw00P29tMuv3NZ8XhJOcBAHbOshDaK5oP8MomNQRa5Q?e=VN2i5e" title="Player">玩家</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41023245_nfu_edu_tw/EQUTI136dIZLlvsnh56KMDMBjM_-DS7cceDU6xG9O3-LPA?e=il4dDN">流星錘</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41023237_nfu_edu_tw/EqsJG_dwrD5BnmGMYzUzTaIBGZBa33tvhNCrrjprt2Pldw?e=0brmCi">輪盤和驅動齒輪檔案</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41023237_nfu_edu_tw/EQMqAjLw4gNDkiWZlntHcsIBU9-KR2ECbLjywURNw1hYdQ?e=aRCMBT">操作程式</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41023237_nfu_edu_tw/Ea5Ab2fJMn9IrHoeIvUAu2cB_8KAMu3frGSl55TkBzjZgQ?e=SCcSWZ">移動程式</a></p>
<p><a href="/downloads/數字1-8.7z">數字圖檔</a></p><h1>Brython 程式環境</h1>
<p><button id="add1to100">亂數</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://raw.githubusercontent.com/mdecd2023/2b2-pj2bg1/main/downloads/w10.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://raw.githubusercontent.com/mdecd2023/2b2-pj2bg1/main/downloads/w10.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><!-- ########################################## -->
<div></div>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h2>Brython_ex2</h2>
<p>This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5.</p>
<p id="brython_div"></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p>Solve ODE:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new paragraph element and set its text content to the solution
p = document.createElement('p')
p.textContent = f"The solution to the ODE is: {y}"

# Append the paragraph element to the body of the webpage
document.body.appendChild(p)</pre>
<p></p>
<p>
<script type="text/python3">
from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)
</script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<p>Brython environment and <a href="https://plotly.com/javascript/">Plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div"&gt;&lt;/p&gt;</pre>
<p>Brython programe with Plotly.js:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)</pre>
<p>This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="mass-spring-damper"></p>
<p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

def dy_dx(y, x):
    y1, y2 = y
    return [y2, -(k/m)*y1 - (c/m)*y2]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [1.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(2)]
    y.append(y_new)

# Create a new div element to hold the plot
'''
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))]}]
layout = {'title': 'Mass-Spring-Damper System', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('mass-spring-damper', data, layout)
</script>
</p>
<p>This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="pid-control"></p>
<p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

Kp = 10.0  # proportional gain
Ki = 1.0   # integral gain
Kd = 0.5   # derivative gain

def dy_dx(y, x):
    y1, y2, e_int, e_prev = y
    e = 1 - y1
    de_dt = -y2
    u = Kp * e + Ki * e_int + Kd * de_dt
    return [y2, (u - k*y1 - c*y2)/m, e, e]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [0.0, 0.0, 0.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(4)]
    y.append(y_new)

'''
# Create a new div element to hold the plot
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))], 'name': 'Output'},
        {'x': x, 'y': [1 for _ in range(len(y))], 'name': 'Setpoint'}]
layout = {'title': 'Mass-Spring-Damper System with PID Control', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('pid-control', data, layout)
</script>
</p>
<p height="480" id="container" width="640"></p>
<p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" type="text/javascript"></script>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 / 480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Define the animation loop
def animate(timestamp):
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
</p>
<p height="480" id="container2" width="640"></p>
<p>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container2']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 /480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Set up a Raycaster for mouse interaction
raycaster = window.THREE.Raycaster.new()
mouse = window.THREE.Vector2.new()

# Define a function to handle mouse move events
def on_mouse_move(event):
    # Calculate the mouse position in normalized device coordinates
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1

# Register the mouse move event handler
document.bind('mousemove', on_mouse_move)

# Define the animation loop
def animate(timestamp):
    # Update the Raycaster with the current mouse position
    raycaster.setFromCamera(mouse, camera)
    
    # Check if the Raycaster intersects with the cube
    intersects = raycaster.intersectObject(cube)
    
    # Change the cube color if it is intersected
    if len(intersects) > 0:
        cube.material.color.set(0xff0000)
    else:
        cube.material.color.set(0x00ff00)
    
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
</p>
<p>STL part viewer</p>
<p height="480" id="stl" width="640"></p>
<p>
<script type="text/python">
from browser import document, html

# Create a container for the STL viewer
stl_container = html.DIV(id="stl_cont")
stl = document["stl"]
stl <= stl_container

# Load the Stl Viewer Javascript Plugin
stl_viewer_script = html.SCRIPT(src="https://www.viewstl.com/plugin/stl_viewer.min.js")
stl <= stl_viewer_script

def init_stl_viewer():
    # Create a new instance of Stl Viewer
    stl_viewer = window.StlViewer.new(document.getElementById("stl_cont"), {"models": [{"id": 0, "filename": "/downloads/block100.stl"}]})

# Wait for the Stl Viewer Javascript Plugin to load before initializing the viewer
document.bind("readystatechange", lambda: init_stl_viewer() if document.readyState == "complete" else None)
</script>
</p>
<p>Using <a href="https://www.sciencedirect.com/science/article/pii/S0950705115005043">sine-cosine algorithm</a> to optimize with constraints in Brython:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>Plot the result by using <a href="https://plotly.com/javascript/">plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
    &lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;
&lt;div id="plot"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'

# Plot the result using Plotly.js
data = [
    {
        'x': [best_solution[0]],
        'y': [best_solution[1]],
        'mode': 'markers',
        'marker': {'size': 12},
        'name': 'Best Solution'
    }
]

layout = {
    'xaxis': {'range': [-10, 10]},
    'yaxis': {'range': [-10, 10]},
}

Plotly.newPlot('plot', data, layout)
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p></p>